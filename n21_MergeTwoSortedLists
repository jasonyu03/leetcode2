/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(!l1 && !l2) {
            return 0;
        }
        if(l1 && !l2) {
            return l1;
        }
        if(!l1 && l2) {
            return l2;
        }
        
        ListNode* head = 0;
        ListNode* ptr_l1 = l1;
        ListNode* ptr_l2 = l2;
        
        if(l1->val <= l2->val) {
            head = l1;
            ptr_l1 = ptr_l1->next;
        }
        else {
            head = l2;
            ptr_l2 = ptr_l2->next;
        }
        
        ListNode* ptr_c = head;
        
        while(ptr_l1 && ptr_l2) {
            if(ptr_c->next == ptr_l1) {
                if(ptr_l1->val > ptr_l2->val) {
                    ptr_c->next = ptr_l2;
                    ptr_c = ptr_c->next;
                    ptr_l2 = ptr_l2->next;
                }
                else {
                    ptr_c = ptr_c->next;
                    ptr_l1 = ptr_l1->next;
                }                
            }
            else {
                if(ptr_l2->val > ptr_l1->val) {
                    ptr_c->next = ptr_l1;
                    ptr_c = ptr_c->next;
                    ptr_l1 = ptr_l1->next;
                }
                else {
                    ptr_c = ptr_c->next;
                    ptr_l2 = ptr_l2->next;
                }                         
            }
        }
        if(!ptr_l1) {
            ptr_c->next = ptr_l2;
        }
        if(!ptr_l2) {
            ptr_c->next = ptr_l1;
        }
                
        return head;
    }
};
