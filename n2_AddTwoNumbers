/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if(!l1 && !l2) {
            return 0;
        }
        
        ListNode* l3 = new ListNode(0);
        l3->next = 0;
        
        ListNode* ptr_l1 = l1;
        ListNode* ptr_l2 = l2;
        ListNode* ptr_l3 = l3;

        int sum = 0;
        int carry = 0;
                
        while(ptr_l1 || ptr_l2) {
            if(ptr_l1 && !ptr_l2) {
                sum = ptr_l1->val + carry;
                if((sum - 10) >= 0) {
                    ptr_l3->val = sum - 10;
                    carry = 1;
                }
                else {
                    ptr_l3->val = sum;
                    carry = 0;
                }
                
                ptr_l1 = ptr_l1->next;
                
                if(ptr_l1 || carry) {
                    ptr_l3->next = new ListNode(0);
                    ptr_l3 = ptr_l3->next;
                    ptr_l3->next = 0;
                    if(!ptr_l1 && carry) {
                        ptr_l3->val = 1;
                        return l3;                        
                    }
                }
                else {
                    return l3;
                }
            }
            else if (!ptr_l1 && ptr_l2) {
                sum = ptr_l2->val + carry;
                if((sum - 10) >= 0) {
                    ptr_l3->val = sum - 10;
                    carry = 1;
                }
                else {
                    ptr_l3->val = sum;
                    carry = 0;
                }
                
                ptr_l2 = ptr_l2->next;
                
                if(ptr_l2 || carry) {
                    ptr_l3->next = new ListNode(0);
                    ptr_l3 = ptr_l3->next;
                    ptr_l3->next = 0;
                    if(!ptr_l2 && carry) {
                        ptr_l3->val = 1;
                        return l3;                        
                    }
                }
                else {
                    return l3;
                }            
            }
            else {
                if(carry == 0) {
                    sum = ptr_l1->val + ptr_l2->val;
                }
                else {
                    sum = ptr_l1->val + ptr_l2->val + 1;
                }
                
                if((sum - 10) >= 0) {
                    ptr_l3->val = sum - 10;
                    carry = 1;
                }
                else {
                    ptr_l3->val = sum;
                    carry = 0;
                }

                ptr_l1 = ptr_l1->next;
                ptr_l2 = ptr_l2->next;
                
                if(ptr_l1 || ptr_l2 || carry) {
                    ptr_l3->next = new ListNode(0);
                    ptr_l3 = ptr_l3->next;
                    ptr_l3->next = 0;
                    if(!ptr_l1 && !ptr_l2 && carry) {
                        ptr_l3->val = 1;
                        return l3;        
                    }
                }
                else {
                    return l3;    
                }
            }
        }
    }
};
